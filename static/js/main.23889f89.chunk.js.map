{"version":3,"sources":["components/SearchBar/SearchBar.js","logo.svg","components/Business/Business.js","components/BusinessList/BusinessList.js","util/Yelp.js","components/App/App.js","serviceWorker.js","index.js"],"names":["SearchBar","props","state","term","location","sortBy","handleSortByChange","bind","handleTermChange","handleLocationChange","handleSearch","sortByOptions","sortByOption","this","setState","event","target","value","searchYelp","preventDefault","Object","keys","map","sortByOptionValue","className","getSortByClass","key","onClick","renderSortByOptions","placeholder","onChange","React","Component","module","exports","Business","src","business","imageSrc","alt","name","address","city","zipCode","category","rating","reviewCount","BusinessList","businesses","id","Yelp","require","default","search","fetch","headers","Authorization","then","response","json","jsonResponse","image_url","address1","categories","title","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.23889f89.chunk.js","sourcesContent":["import React from 'react';\nimport './SearchBar.css';\n\nclass SearchBar extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            term: '',\n            location: '',\n            sortBy: 'best_match'\n        };\n        this.handleSortByChange=this.handleSortByChange.bind(this);\n        this.handleTermChange=this.handleTermChange.bind(this);\n        this.handleLocationChange=this.handleLocationChange.bind(this);\n        this.handleSearch=this.handleSearch.bind(this);\n        this.sortByOptions = {\n            'Best Match': 'best_match',\n            'Highest Rated': 'rating',\n            'Most Reviewed': 'review_count'\n        };\n    }\n    getSortByClass(sortByOption) {\n        return this.state.sortBy == sortByOption ? 'active' : '';\n    }\n    handleSortByChange(sortByOption) {\n        this.setState({ sortBy: sortByOption });\n    }\n    handleTermChange(event){\n        this.setState({term:event.target.value});\n    }\n    handleLocationChange(event){\n        this.setState({location:event.target.value});\n    }\n    handleSearch(event){\n        this.props.searchYelp(this.state.term, this.state.location, this.state.sortBy);\n        event.preventDefault();\n    }\n    renderSortByOptions() {\n        return Object.keys(this.sortByOptions).map((sortByOption) => {\n            let sortByOptionValue = this.sortByOptions[sortByOption];\n            return <li \n                className={this.getSortByClass(sortByOptionValue)}\n                key={sortByOptionValue}\n                onClick={this.handleSortByChange.bind(this, sortByOptionValue)}>\n                {sortByOption}\n            </li>;\n        });\n    }\n\n    render() {\n        return (<div className=\"SearchBar\">\n            <div className=\"SearchBar-sort-options\">\n                <ul>\n                    {this.renderSortByOptions()}\n                </ul>\n            </div>\n            <div className=\"SearchBar-fields\">\n                <input placeholder=\"Search Businesses\" \n                    onChange={this.handleTermChange}/>\n                <input placeholder=\"Where?\" \n                    onChange={this.handleLocationChange}/>\n            </div>\n            <div className=\"SearchBar-submit\">\n                <a onClick={this.handleSearch}>Let's Go</a>\n            </div>\n        </div>)\n    }\n}\n\n\nexport default SearchBar;","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport './Business.css';\n\nclass Business extends React.Component{\n    render(){\n        return (\n        <div className=\"Business\">\n        <div className=\"image-container\">\n          <img src={this.props.business.imageSrc} alt=''/>\n        </div>\n        <h2>{this.props.business.name}</h2>\n        <div className=\"Business-information\">\n          <div className=\"Business-address\">\n            <p>{this.props.business.address}</p>\n            <p>{this.props.business.city}</p>\n            <p>{this.props.business.state} {this.props.business.zipCode}</p>\n          </div>\n          <div className=\"Business-reviews\">\n            <h3>{this.props.business.category}</h3>\n            <h3 className=\"rating\">{this.props.business.rating} stars</h3>\n            <p>{this.props.business.reviewCount} reviews</p>\n          </div>\n        </div>\n      </div>);\n\n    }\n}\n\nexport default Business;\n\n","import React from 'react';\nimport './BusinessList.css';\nimport Business from '../Business/Business';\n\nclass BusinessList extends React.Component {\n    render() {\n        return (\n            <div className=\"BusinessList\">\n                {/* Do we still need the business=below? */}\n                {this.props.businesses.map(business=>{return <Business key={business.id} business={business}/>;})}\n            </div>\n        );\n    }\n}\n\nexport default BusinessList;","const { default: SearchBar } = require(\"../components/SearchBar/SearchBar\");\n\nconst apiKey = 'bWQ3DZM1gtPxXIfs97QUt100C_9NmRADrdJJOK951Hh5BzuIlGVSoB0LGvHAwicVCEeJCvn3_TMij3PwjJkwp_bivnsW4QpGZEI2Gk6znsrl3ravMRN-5nkBtusNX3Yx';\n\nconst Yelp = {\n    search(term, location, sortBy) {\n        return fetch(`https://cors-anywhere.herokuapp.com/https://api.yelp.com/v3/businesses/search?term=${term}&location=${location}&sort_by=${sortBy}`,\n            {\n                headers: {\n                    Authorization: `Bearer ${apiKey}`\n                }\n            }\n        ).then(response => { return response.json(); })\n            .then(jsonResponse => {\n                if (jsonResponse.businesses) {\n                    return (jsonResponse.businesses.map(business => {\n                        return ({\n                            id: business.id,\n                            imageSrc: business.image_url,\n                            name: business.name,\n                            address: business.location.address1,\n                            city: business.location.city,\n                            state: business.location.state,\n                            zipCode: business.location.zipCode,\n                            category: business.categories[0].title,\n                            rating: business.rating,\n                            reviewCount: business.reviewCount,\n                        })\n                    }));\n                }\n\n            });\n    }\n\n};\n\nexport default Yelp;","// Things I could do next:\n// Make addresses clickable and have them open the address in Google Maps in a new tab\n// Make images clickable and have them open the business’ website in a new tab\n// Clicking on a different sorting option automatically requeries the Yelp API, rather than having to manually click “Let’s Go” again\n// Implement your own type of sort (for example, by entering a distance or radius from a central location)\n// Allow you to search by pressing “Enter” (or “Return”) on your keyboard, as opposed to manually clicking\n// Add autocompletion of addresses to the “Location” input\n\n\n\nimport React from 'react';\nimport logo from '../../../src/logo.svg';\nimport './App.css';\nimport '../BusinessList/BusinessList';\nimport '../../util/Yelp';\nimport Yelp from '../../util/Yelp';\nimport '../SearchBar/SearchBar';\nimport BusinessList from '../BusinessList/BusinessList';\nimport SearchBar from '../SearchBar/SearchBar';\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.searchYelp = this.searchYelp.bind(this);\n    this.state = {\n      businesses: [],\n    }\n  }\n\n  searchYelp(term, location, sortBy) {\n    Yelp.search(term, location, sortBy)\n      .then(businesses => {\n        this.setState({ businesses: businesses });\n      });\n  }\n\n  render() {\n    return (\n      <div className=\"App\" >\n        <h1>ravenous</h1>\n        <SearchBar searchYelp={this.searchYelp} />\n        <BusinessList businesses={this.state.businesses} />\n      </div>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}